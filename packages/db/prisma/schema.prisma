// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x", "linux-musl"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @unique @default(uuid())
  email             String              @unique
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  accounts          Account[]
  PlaceMember       PlaceMember[]
  Comment           Comment[]
  PostLike          PostLike[]
  EventConfirmation EventConfirmation[]
  Post              Post[]
  ContactMessage    ContactMessage[]
  PlaceEvent        PlaceEvent[]
}

model Account {
  id       String  @id @unique @default(uuid())
  provider String
  secret   String?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@unique([provider, userId])
}

model Place {
  id String @id @default(uuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slug String @unique

  logo       String?
  coverImage String?

  PlaceMember    PlaceMember[]
  PlaceEvent     PlaceEvent[]
  Post           Post[]
  PlaceData      PlaceData?
  ContactMessage ContactMessage[]
}

model ContactMessage {
  id String @id @default(uuid())

  createdAt DateTime @default(now())

  place Place @relation(fields: [placeId], references: [id])

  author      User?   @relation(fields: [userId], references: [id])
  contactData Json?
  data        String?
  type        String
  placeId     String
  userId      String?
}

model PlaceData {
  id      String @id @default(uuid())
  data    String
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId String @unique
}

model PlaceEvent {
  id      String  @id @default(uuid())
  title   String
  content String?
  place   Place   @relation(fields: [placeId], references: [id])
  placeId String

  date       DateTime
  isProposal Boolean  @default(false)
  author     User?    @relation(fields: [authorId], references: [id])

  createdAt      DateTime            @default(now())
  confirmations  EventConfirmation[]
  authorId       String?
  CommentOnEvent CommentOnEvent[]
}

model EventConfirmation {
  user    User       @relation(fields: [userId], references: [id])
  userId  String
  event   PlaceEvent @relation(fields: [eventId], references: [id])
  eventId String

  @@id([userId, eventId])
}

model PostLike {
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  post     Post   @relation(fields: [postId], references: [id])
  postId   String

  @@id([authorId, postId])
}

model Post {
  id        String  @id @default(cuid())
  thumbnail String?
  content   String
  place     Place   @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId   String

  author User?   @relation(fields: [authorId], references: [id])
  edited Boolean @default(false)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  CommentOnPost CommentOnPost[]

  likes    PostLike[]
  authorId String?
}

model PlaceMember {
  place  Place @relation(fields: [placeId], references: [id], onDelete: Cascade)
  member User  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  placeId  String
  memberId String

  role String @default("regular") // owner | admin | regular

  @@id([memberId, placeId])
}

model Comment {
  id String @id @default(uuid())

  author User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  content String

  createdAt     DateTime        @default(now())
  CommentOnPost CommentOnPost[]

  replyToId      String?
  replyTo        Comment?         @relation("replies", fields: [replyToId], references: [id], onDelete: Cascade)
  replies        Comment[]        @relation("replies")
  CommentOnEvent CommentOnEvent[]
}

model CommentOnEvent {
  comment   Comment    @relation(fields: [commentId], references: [id])
  event     PlaceEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  commentId String
  eventId   String

  @@id([eventId, commentId])
}

model CommentOnPost {
  comment   Comment @relation(fields: [commentId], references: [id])
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String
  postId    String

  @@id([postId, commentId])
}
